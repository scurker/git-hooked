var fs = require('fs')
  , path = require('path')
  , root = process.cwd()
  , utils = require('./utils')
  , hooks = require('./hooks')
  , userHooksDir = '.hooks'
  , msg = "/*! Generated by git-hooked. Do not modify! */";

// Resolve user specified hooks directory
var pkg = require(path.resolve(root, 'package'));
if(pkg.config && pkg.config['git-hooked'] && pkg.config['git-hooked'].dir) {
  userHooksDir = pkg.config['git-hooked'].dir;
}

var gh = {

  root: root,

  userHooks: userHooksDir,

  isGitProject: function() {
    return utils.dirExists(path.join(root, '.git'));
  },

  hasGitHooksDir: function() {
    return utils.dirExists(path.join(root, '.git/hooks'));
  },

  hasUserHooksDir: function() {
    return utils.dirExists(path.join(root, userHooksDir));
  },

  installHooks: function(hook) {
    var userHooks = fs.readdirSync(path.join(root, userHooksDir)) || []
      , installHooks = typeof hook !== 'undefined' ? hooks.filter(function(h) { return h === hook; }) : hooks;

    installHooks.forEach(function(hook) {
      var userHook = path.join(root, userHooksDir, hook);
      if(utils.fileExists(userHook)) {
        var targetPath = path.join(root, '.git/hooks', hook);

        // check to see if the user already has a git hook that wasn't created by git-hooked
        if(utils.fileExists(targetPath) && fs.readFileSync(targetPath, 'UTF-8').indexOf(msg) === -1) {
          console.log(
            'Found an existing hook for ' + hook + '\n' +
            'Backing up to .git/hooks/' + hook + '.user'
          );
          fs.renameSync(targetPath, targetPath + '.user');
        }

        console.log('Installing ' + hook + ' hook...')

        fs.createReadStream(path.join(__dirname, 'hook.template.js'))
          .pipe(fs.createWriteStream(targetPath, hook))

        fs.chmod(targetPath, 0755);
        fs.chmod(userHook, 0755);

      }

    });

  }

};

module.exports = gh;